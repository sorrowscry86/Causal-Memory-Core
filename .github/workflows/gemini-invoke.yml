name: '▶️ Gemini Invoke'

on:
  workflow_call:
    inputs:
      additional_context:
        type: 'string'
        description: 'Any additional context from the request'
        required: false

concurrency:
  group: '${{ github.workflow }}-invoke-${{ github.event_name }}-${{ github.event.pull_request.number || github.event.issue.number }}'
  cancel-in-progress: false

defaults:
  name: '▶️ Gemini Invoke'

  on:
    workflow_call:
      inputs:
        additional_context:
          type: 'string'
          description: 'Any additional context from the request'
          required: false

  concurrency:
    group: '${{ github.workflow }}-invoke-${{ github.event_name }}-${{ github.event.pull_request.number || github.event.issue.number }}'
    cancel-in-progress: false

  defaults:
    run:
      shell: 'bash'

  jobs:
    invoke:
      runs-on: 'ubuntu-latest'
      permissions:
        contents: 'read'
        id-token: 'write'
        issues: 'write'
        pull-requests: 'write'
      name: '▶️ Gemini Invoke'

      on:
        workflow_call:
          inputs:
            additional_context:
              type: 'string'
              description: 'Any additional context from the request'
              required: false

      concurrency:
        group: '${{ github.workflow }}-invoke-${{ github.event_name }}-${{ github.event.pull_request.number || github.event.issue.number }}'
        cancel-in-progress: false

      defaults:
        run:
          shell: 'bash'

      jobs:
        invoke:
          runs-on: 'ubuntu-latest'
          permissions:
            contents: 'read'
            id-token: 'write'
            issues: 'write'
            pull-requests: 'write'
          steps:
            - name: 'Mint identity token'
              id: 'mint_identity_token'
              if: |-
                ${{ vars.APP_ID }}
              uses: 'actions/create-github-app-token@a8d616148505b5069dccd32f177bb87d7f39123b'
              with:
                app-id: '${{ vars.APP_ID }}'
                private-key: '${{ secrets.APP_PRIVATE_KEY }}'
                permission-contents: 'read'
                permission-issues: 'write'
                permission-pull-requests: 'write'

            - name: 'Run Gemini CLI'
              id: 'run_gemini'
              uses: 'google-github-actions/run-gemini-cli@2a77eb258d8d2447292fd5d9df6e7b49533d4f37'
              env:
                TITLE: '${{ github.event.pull_request.title || github.event.issue.title }}'
                DESCRIPTION: '${{ github.event.pull_request.body || github.event.issue.body }}'
                EVENT_NAME: '${{ github.event_name }}'
                GITHUB_TOKEN: '${{ steps.mint_identity_token.outputs.token || secrets.GITHUB_TOKEN || github.token }}'
                IS_PULL_REQUEST: '${{ !!github.event.pull_request }}'
                ISSUE_NUMBER: '${{ github.event.pull_request.number || github.event.issue.number }}'
                REPOSITORY: '${{ github.repository }}'
                ADDITIONAL_CONTEXT: '${{ inputs.additional_context }}'
              with:
                gemini_api_key: '${{ secrets.GEMINI_API_KEY }}'
                gcp_workload_identity_provider: '${{ vars.GCP_WIF_PROVIDER }}'
                gcp_project_id: '${{ vars.GOOGLE_CLOUD_PROJECT }}'
                gcp_location: '${{ vars.GOOGLE_CLOUD_LOCATION }}'
                gcp_service_account: '${{ vars.SERVICE_ACCOUNT_EMAIL }}'
                use_vertex_ai: '${{ vars.GOOGLE_GENAI_USE_VERTEXAI }}'
                google_api_key: '${{ secrets.GOOGLE_API_KEY }}'
                use_gemini_code_assist: '${{ vars.GOOGLE_GENAI_USE_GCA }}'
                gemini_debug: '${{ fromJSON(vars.DEBUG || vars.ACTIONS_STEP_DEBUG || false) }}'
                gemini_model: '${{ vars.GEMINI_MODEL }}'
                settings: |-
                  {
                    "maxSessionTurns": 25,
                    "telemetry": {
                      "enabled": ${{ vars.GOOGLE_CLOUD_PROJECT != '' }},
                      "target": "gcp"
                    },
                    "coreTools": [
                      "run_shell_command(cat)",
                      "run_shell_command(echo)",
                      "run_shell_command(grep)",
                      "run_shell_command(head)",
                      "run_shell_command(tail)"
                    ]
                  }
                    "env": {
